{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Statistics Canada OrchardCore Documentation \u00b6 Welcome to the StatCan.OrchardCore documentation. Learn how to use our collection of application and SaaS modules and components, and Themes for building your project. OrchardCore CMS \u00b6 The project is built on OrchardCore CMS version 1.0.0-rc2-15674 . To learn more about the underlying framework, take a look through the Orchard Core CMS documentation and the Orchard Core Github repository . Where to Start? \u00b6 I want to: * Help contribute to the underlying platform: See the Getting Started guide * Set up a solution (e.g. website) quickly for my project and modify how it looks: Follow the Solution Templates guide","title":"Home"},{"location":"#statistics-canada-orchardcore-documentation","text":"Welcome to the StatCan.OrchardCore documentation. Learn how to use our collection of application and SaaS modules and components, and Themes for building your project.","title":"Statistics Canada OrchardCore Documentation"},{"location":"#orchardcore-cms","text":"The project is built on OrchardCore CMS version 1.0.0-rc2-15674 . To learn more about the underlying framework, take a look through the Orchard Core CMS documentation and the Orchard Core Github repository .","title":"OrchardCore CMS"},{"location":"#where-to-start","text":"I want to: * Help contribute to the underlying platform: See the Getting Started guide * Set up a solution (e.g. website) quickly for my project and modify how it looks: Follow the Solution Templates guide","title":"Where to Start?"},{"location":"contact/","text":"Contact \u00b6 For any questions (e.g. development, OrchardCore etc.) feel free to ask us on our Community Discussion Q/A channel !","title":"Contact"},{"location":"contact/#contact","text":"For any questions (e.g. development, OrchardCore etc.) feel free to ask us on our Community Discussion Q/A channel !","title":"Contact"},{"location":"development/assets/","text":"Assets asset (css, js) files \u00b6 When adding / modifying assets, we suggest you use the gulp script to transpile and copy the assets into the wwwroot folder. To install gulp, run npm install from the root of this solution. Use the npm run watch command to automatically rebuild assets when changes are detected. Supported asset types are: SaSS, css, ts, js, and less. How to define assets \u00b6 The convention used in this repository is to put all css / js files in the Assets folder of your theme or module. Then, you define a Assets.json file that specifies which scripts to compile to the wwwroot folder of the solution. Please see the DigitalTheme for an example on how this works. The Assets folder contains the raw js and sass files and the Assets.json file defines which files should be copied / combined in the output.","title":"Assets"},{"location":"development/assets/#assets-asset-css-js-files","text":"When adding / modifying assets, we suggest you use the gulp script to transpile and copy the assets into the wwwroot folder. To install gulp, run npm install from the root of this solution. Use the npm run watch command to automatically rebuild assets when changes are detected. Supported asset types are: SaSS, css, ts, js, and less.","title":"Assets asset (css, js) files"},{"location":"development/assets/#how-to-define-assets","text":"The convention used in this repository is to put all css / js files in the Assets folder of your theme or module. Then, you define a Assets.json file that specifies which scripts to compile to the wwwroot folder of the solution. Please see the DigitalTheme for an example on how this works. The Assets folder contains the raw js and sass files and the Assets.json file defines which files should be copied / combined in the output.","title":"How to define assets"},{"location":"development/committing/","text":"Git Commit Message Standard \u00b6 Taken from conventional commits Summary \u00b6 The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in semantic versioning). feat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in semantic versioning). BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in semantic versioning). A BREAKING CHANGE can be part of commits of any type. types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others. footers other than BREAKING CHANGE: may be provided and follow a convention similar to git trailer format. Additional types are not mandated by the conventional commits specification, and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays. Examples \u00b6 Commit message with description and breaking change footer \u00b6 feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files Commit message with ! to draw attention to breaking change \u00b6 refactor!: drop support for Node 6 Commit message with both ! and BREAKING CHANGE footer \u00b6 refactor!: drop support for Node 6 BREAKING CHANGE: refactor to use JavaScript features not available in Node 6. Commit message with no body \u00b6 docs: correct spelling of CHANGELOG Commit message with scope \u00b6 feat(lang): add polish language Commit message with multi-paragraph body and multiple footers \u00b6 fix: correct minor typos in code see the issue for details on typos fixed. Reviewed-by: Z Refs #133","title":"Committing"},{"location":"development/committing/#git-commit-message-standard","text":"Taken from conventional commits","title":"Git Commit Message Standard"},{"location":"development/committing/#summary","text":"The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in semantic versioning). feat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in semantic versioning). BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in semantic versioning). A BREAKING CHANGE can be part of commits of any type. types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others. footers other than BREAKING CHANGE: may be provided and follow a convention similar to git trailer format. Additional types are not mandated by the conventional commits specification, and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays.","title":"Summary"},{"location":"development/committing/#examples","text":"","title":"Examples"},{"location":"development/committing/#commit-message-with-description-and-breaking-change-footer","text":"feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files","title":"Commit message with description and breaking change footer"},{"location":"development/committing/#commit-message-with-to-draw-attention-to-breaking-change","text":"refactor!: drop support for Node 6","title":"Commit message with ! to draw attention to breaking change"},{"location":"development/committing/#commit-message-with-both-and-breaking-change-footer","text":"refactor!: drop support for Node 6 BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.","title":"Commit message with both ! and BREAKING CHANGE footer"},{"location":"development/committing/#commit-message-with-no-body","text":"docs: correct spelling of CHANGELOG","title":"Commit message with no body"},{"location":"development/committing/#commit-message-with-scope","text":"feat(lang): add polish language","title":"Commit message with scope"},{"location":"development/committing/#commit-message-with-multi-paragraph-body-and-multiple-footers","text":"fix: correct minor typos in code see the issue for details on typos fixed. Reviewed-by: Z Refs #133","title":"Commit message with multi-paragraph body and multiple footers"},{"location":"development/getting-started/","text":"Getting Started \u00b6 Hello fellow developer, Get started here ! Developer environment \u00b6 Dependencies \u00b6 Dotnet Core 3.1 NodeJS 12+ VSCode or Visual Studio 2019 Recommended VSCode extensions \u00b6 Omnisharp (C#) Liquid Language Support Bracket pair colorizer vscode-icons GitLens EditorConfig vscode-solution-explorer Recommended powershell setup \u00b6 This step is recommended for VSCode users. This creates aliases Run these commands to setup your powershell profile script: # From a powershell terminal # This displays the path of your profile $profile # Test to see if it exists test-path $profile # Create it if it does not exist new-item -path $profile -itemtype file -force # Edit it in VSCode code $profile Copy and modify this in your powershell profile $innoGitRepo = \"<path-to>\\StatCan.OrchardCore\" # Navigate to directory function in { set-location $innoGitRepo } # Run the clean script from the test folder. Warning: this deletes your App_Data function iac { set-location \" $( $innoGitRepo ) \\test\" npm run clean } # Open cypress function it { set-location \" $( $innoGitRepo ) \\test\" npm run cypress } # Run css watcher function iw { set-location \" $( $innoGitRepo ) \" npm run watch } # Build function ib { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet build } # Clean function ic { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet clean } # Run function ir { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet run } # Run (Production) function ip { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet .\\ bin \\ Debug \\ netcoreapp3 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } # Build & Run (Production) function ibp { ib dotnet .\\ bin \\ Debug \\ netcoreapp3 . 1 \\ StatCan . OrchardCore . Cms . Web . dll } Don't forget to restart your powershell session to load the changes. Quickstart \u00b6 Run these commands in powershell: From anywhere ir if you have the above powershell setup or From the root of the project dotnet run --project src/StatCan.OrchardCore.Cms.Web/StatCan.OrchardCore.Cms.Web.csproj if you don't Visit https://localhost:5001 to load your Orchard Website When presented with the orchard setup screen, Select the the recipe you want to try. I suggest using the Software as a Service recipe and then use Orchard's Tenant feature to test different sites / recipes Use sqlite as a database to keep things simple Visit https://localhost:5001/admin to use the admin interface of Orchard. Starting fresh \u00b6 To cleanup the environment and start fresh, you need to delete the src/StatCan.OrchardCore.Cms.Web/App_Data folder. This deletes all configuration and databases (if you are using SQLite). You can also delete tenants individually by deleting the data in src/StatCan.OrchardCore.Cms.Web/App_Data/Sites/{TenantName} and removing the entry in src/StatCan.OrchardCore.Cms.Web/App_Data/tenants.json Testing \u00b6 The framework used to test the innovation website is Cypress. Note: The tests assume a clean environment and may fail if you run them on an existing instance. To run tests: From the test folder of the project, run npm install . From the same folder, you can run npm run cypress to open cypress and start running tests Debugging \u00b6 We include launch.json / tasks.json files to help debug your code. To launch the site with debugging, open the Debug (ctrl+shift+D) vscode window. Select the .NET Core Launch(web) if the project is not running, or .NET Core Attach to attach the debugger to attach to a running project.","title":"Getting Started"},{"location":"development/getting-started/#getting-started","text":"Hello fellow developer, Get started here !","title":"Getting Started"},{"location":"development/getting-started/#developer-environment","text":"","title":"Developer environment"},{"location":"development/getting-started/#dependencies","text":"Dotnet Core 3.1 NodeJS 12+ VSCode or Visual Studio 2019","title":"Dependencies"},{"location":"development/getting-started/#recommended-vscode-extensions","text":"Omnisharp (C#) Liquid Language Support Bracket pair colorizer vscode-icons GitLens EditorConfig vscode-solution-explorer","title":"Recommended VSCode extensions"},{"location":"development/getting-started/#recommended-powershell-setup","text":"This step is recommended for VSCode users. This creates aliases Run these commands to setup your powershell profile script: # From a powershell terminal # This displays the path of your profile $profile # Test to see if it exists test-path $profile # Create it if it does not exist new-item -path $profile -itemtype file -force # Edit it in VSCode code $profile Copy and modify this in your powershell profile $innoGitRepo = \"<path-to>\\StatCan.OrchardCore\" # Navigate to directory function in { set-location $innoGitRepo } # Run the clean script from the test folder. Warning: this deletes your App_Data function iac { set-location \" $( $innoGitRepo ) \\test\" npm run clean } # Open cypress function it { set-location \" $( $innoGitRepo ) \\test\" npm run cypress } # Run css watcher function iw { set-location \" $( $innoGitRepo ) \" npm run watch } # Build function ib { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet build } # Clean function ic { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet clean } # Run function ir { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet run } # Run (Production) function ip { set-location \" $( $innoGitRepo ) src\\StatCan.OrchardCore.Cms.Web\" dotnet .\\ bin \\ Debug \\ netcoreapp3 . 0 \\ StatCan . OrchardCore . Cms . Web . dll } # Build & Run (Production) function ibp { ib dotnet .\\ bin \\ Debug \\ netcoreapp3 . 1 \\ StatCan . OrchardCore . Cms . Web . dll } Don't forget to restart your powershell session to load the changes.","title":"Recommended powershell setup"},{"location":"development/getting-started/#quickstart","text":"Run these commands in powershell: From anywhere ir if you have the above powershell setup or From the root of the project dotnet run --project src/StatCan.OrchardCore.Cms.Web/StatCan.OrchardCore.Cms.Web.csproj if you don't Visit https://localhost:5001 to load your Orchard Website When presented with the orchard setup screen, Select the the recipe you want to try. I suggest using the Software as a Service recipe and then use Orchard's Tenant feature to test different sites / recipes Use sqlite as a database to keep things simple Visit https://localhost:5001/admin to use the admin interface of Orchard.","title":"Quickstart"},{"location":"development/getting-started/#starting-fresh","text":"To cleanup the environment and start fresh, you need to delete the src/StatCan.OrchardCore.Cms.Web/App_Data folder. This deletes all configuration and databases (if you are using SQLite). You can also delete tenants individually by deleting the data in src/StatCan.OrchardCore.Cms.Web/App_Data/Sites/{TenantName} and removing the entry in src/StatCan.OrchardCore.Cms.Web/App_Data/tenants.json","title":"Starting fresh"},{"location":"development/getting-started/#testing","text":"The framework used to test the innovation website is Cypress. Note: The tests assume a clean environment and may fail if you run them on an existing instance. To run tests: From the test folder of the project, run npm install . From the same folder, you can run npm run cypress to open cypress and start running tests","title":"Testing"},{"location":"development/getting-started/#debugging","text":"We include launch.json / tasks.json files to help debug your code. To launch the site with debugging, open the Debug (ctrl+shift+D) vscode window. Select the .NET Core Launch(web) if the project is not running, or .NET Core Attach to attach the debugger to attach to a running project.","title":"Debugging"},{"location":"development/localization/","text":"Localization \u00b6 Orchard uses PO files to support translation / pluralization of static strings. See the orchard documentation . How to generate POT files from our modules \u00b6 Install the po-extractor tool. dotnet tool install --global PoExtractor.OrchardCore Run extractpo-oc C:\\PathToRepo\\src C:\\temp\\OrchardInno --liquid Where to place translated PO files \u00b6 How to create translations \u00b6 I like to use POEdit to create the translation. Another good option is to upload the po file to Google Translator Toolkit . Google automatically translates all strings in the file using Google Translate which makes it much easier than having to translate everything from scratch. How to sync changes to the pot files \u00b6 Generate new pot files using the command then either use POEdit to update every PO file from a corresponding POT file OR use the msgmerge utility from the gettext library.","title":"Localization"},{"location":"development/localization/#localization","text":"Orchard uses PO files to support translation / pluralization of static strings. See the orchard documentation .","title":"Localization"},{"location":"development/localization/#how-to-generate-pot-files-from-our-modules","text":"Install the po-extractor tool. dotnet tool install --global PoExtractor.OrchardCore Run extractpo-oc C:\\PathToRepo\\src C:\\temp\\OrchardInno --liquid","title":"How to generate POT files from our modules"},{"location":"development/localization/#where-to-place-translated-po-files","text":"","title":"Where to place translated PO files"},{"location":"development/localization/#how-to-create-translations","text":"I like to use POEdit to create the translation. Another good option is to upload the po file to Google Translator Toolkit . Google automatically translates all strings in the file using Google Translate which makes it much easier than having to translate everything from scratch.","title":"How to create translations"},{"location":"development/localization/#how-to-sync-changes-to-the-pot-files","text":"Generate new pot files using the command then either use POEdit to update every PO file from a corresponding POT file OR use the msgmerge utility from the gettext library.","title":"How to sync changes to the pot files"},{"location":"development/solution-templates/","text":"Solution Templates \u00b6 Save time by using one of our templated solutions! We're leveraging dotnet new ( see Microsoft developer docs ) here. The Solution Template \u00b6 This template sets up a new solution that allows you to create your own Themes and Modules. Uses StatCan.OrchardCore package as hosted on Downloading \u00b6 To create a new site using this boilerplate you'll first need to install the template, which is hosted on CloudSmith. dotnet new -i StatCan.OrchardCore.ProjectTemplates::1.0.0-rc2-* --nuget-source https://nuget.cloudsmith.io/statcan-digitalinnovation/statcan-orchardcore/v3/index.json Run \u00b6 Once the installation is complete run this command to create your project boilerplate dotnet new stc-oc-siteboilerplate -n Project.StatCan.OrchardCore -o Project.StatCan.OrchardCore -p \"Name\" -pd \"Desciption\" Parameters \u00b6 -n | --name : Namespace and name of the .Net project e.g. Project.OrchardCore -o | --output : Location to place the generated output. -p | --pname : Project name displayed in the read me. -pd | --pdescription : Project description displayed in the read me. -ov | --orchard-version : OrchardCore version to use. -sov | --statcan-orchard-version : StatCan orchard version to use.","title":"Solution Templates"},{"location":"development/solution-templates/#solution-templates","text":"Save time by using one of our templated solutions! We're leveraging dotnet new ( see Microsoft developer docs ) here.","title":"Solution Templates"},{"location":"development/solution-templates/#the-solution-template","text":"This template sets up a new solution that allows you to create your own Themes and Modules. Uses StatCan.OrchardCore package as hosted on","title":"The Solution Template"},{"location":"development/solution-templates/#downloading","text":"To create a new site using this boilerplate you'll first need to install the template, which is hosted on CloudSmith. dotnet new -i StatCan.OrchardCore.ProjectTemplates::1.0.0-rc2-* --nuget-source https://nuget.cloudsmith.io/statcan-digitalinnovation/statcan-orchardcore/v3/index.json","title":"Downloading"},{"location":"development/solution-templates/#run","text":"Once the installation is complete run this command to create your project boilerplate dotnet new stc-oc-siteboilerplate -n Project.StatCan.OrchardCore -o Project.StatCan.OrchardCore -p \"Name\" -pd \"Desciption\"","title":"Run"},{"location":"development/solution-templates/#parameters","text":"-n | --name : Namespace and name of the .Net project e.g. Project.OrchardCore -o | --output : Location to place the generated output. -p | --pname : Project name displayed in the read me. -pd | --pdescription : Project description displayed in the read me. -ov | --orchard-version : OrchardCore version to use. -sov | --statcan-orchard-version : StatCan orchard version to use.","title":"Parameters"},{"location":"development/testing/","text":"Testing \u00b6 We use the Cypress JS testing framework to run E2E tests for this application. Useful commands \u00b6 From the /test folder in this solution, you can run the following commands to simplify testing the application. npm run host hosts a version of OC running in production mode (faster). npm run build builds the application. npm run clean Deletes /src/StatCan.OrchardCore.Cms.Web/App_Data . npm run test hosts the site then runs cypress tests. npm run test:clean Deletes /src/StatCan.OrchardCore.Cms.Web/App_Data , hosts the site, run cypress tests. npm run test:clean-build cleans App_Data , builds the site, hosts the site and runs cypress tests. This is recommended. npm run cypress opens cypress dashboard. npm run cypress:run runs the cypress tests. Assumes a pre-running instance.","title":"Testing"},{"location":"development/testing/#testing","text":"We use the Cypress JS testing framework to run E2E tests for this application.","title":"Testing"},{"location":"development/testing/#useful-commands","text":"From the /test folder in this solution, you can run the following commands to simplify testing the application. npm run host hosts a version of OC running in production mode (faster). npm run build builds the application. npm run clean Deletes /src/StatCan.OrchardCore.Cms.Web/App_Data . npm run test hosts the site then runs cypress tests. npm run test:clean Deletes /src/StatCan.OrchardCore.Cms.Web/App_Data , hosts the site, run cypress tests. npm run test:clean-build cleans App_Data , builds the site, hosts the site and runs cypress tests. This is recommended. npm run cypress opens cypress dashboard. npm run cypress:run runs the cypress tests. Assumes a pre-running instance.","title":"Useful commands"},{"location":"reference/Liquid/","text":"Liquid \u00b6 LocalizedText ( StatCan.OrchardCore.LocalizedText ) \u00b6 Use the localize liquid filter to reference and output a value that matches the current culture and name provided. Examples \u00b6 Data: [ { \"Name\" : \"my_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some French Value\" } ] } ] Input {{ \"my_value\" | localize }} {{ Model . ContentItem | localize : \"my_value\" }} Output Some English Value Some English Value You can also pass parameters to your values \u00b6 Data: [ { \"Name\" : \"my_parameterized_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some {0} English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some {0} French Value\" } ] } ] Input {{ \"my_parameterized_value\" | localize : \"parameterized\" }} {{ Model . ContentItem | localize : \"my_parameterized_value\" , \"parameterized\" }} Output Some parameterized English Value Some parameterized English Value if you want to render html, you need to | raw \u00b6 Data: [ { \"Name\" : \"my_html_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"<span>Some English Value</span>\" }, { \"Culture\" : \"fr\" , \"Value\" : \"<span>Some French Value</span>\" } ] } ] Input {{ \"my_html_value\" | localize }} {{ Model . ContentItem | localize : \"my_html_value\" | raw }} Output &lt;span&gt;bold value&lt;/span&gt; <span>Some English Value</span> GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 Here are some liquid filters provided by the GitHub module. tokenName refers to the name of the token you added to the github settings. github_pr filter \u00b6 Returns the PullRequest object for the specified pull request number. {{ 123 | github_pullrequest : \"owner\" , \"repo\" , \"tokenName\" }} github_pr_reviewcomments filter \u00b6 Returns a list of PullRequestReviewComment object for the specified pull request number. This returns the comments related to PR reviews. Use the github_comments filter to get pr discussions. {{ 123 | github_pullrequest_comments : \"owner\" , \"repo\" , \"tokenName\" }} github_issue filter \u00b6 Returns the Issue object for the specified issue number. {{ 123 | github_issue : \"owner\" , \"repo\" , \"tokenName\" }} github_comments filter \u00b6 Returns a list of IssueComment for the specified issue / pull request number. {{ 123 | github_comments : \"owner\" , \"repo\" , \"tokenName\" }} User filters \u00b6 users_by_role filter \u00b6 Returns a list of Users that have the role(s) passed as a parameter of the filter {% assign users = \"Editor,Administrator\" | split : ',' | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %} -- {% assign users = \"Editor\" | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %}","title":"Liquid"},{"location":"reference/Liquid/#liquid","text":"","title":"Liquid"},{"location":"reference/Liquid/#localizedtext-statcanorchardcorelocalizedtext","text":"Use the localize liquid filter to reference and output a value that matches the current culture and name provided.","title":"LocalizedText (StatCan.OrchardCore.LocalizedText)"},{"location":"reference/Liquid/#examples","text":"Data: [ { \"Name\" : \"my_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some French Value\" } ] } ] Input {{ \"my_value\" | localize }} {{ Model . ContentItem | localize : \"my_value\" }} Output Some English Value Some English Value","title":"Examples"},{"location":"reference/Liquid/#you-can-also-pass-parameters-to-your-values","text":"Data: [ { \"Name\" : \"my_parameterized_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"Some {0} English Value\" }, { \"Culture\" : \"fr\" , \"Value\" : \"Some {0} French Value\" } ] } ] Input {{ \"my_parameterized_value\" | localize : \"parameterized\" }} {{ Model . ContentItem | localize : \"my_parameterized_value\" , \"parameterized\" }} Output Some parameterized English Value Some parameterized English Value","title":"You can also pass parameters to your values"},{"location":"reference/Liquid/#if-you-want-to-render-html-you-need-to-raw","text":"Data: [ { \"Name\" : \"my_html_value\" , \"LocalizedItems\" : [ { \"Culture\" : \"en\" , \"Value\" : \"<span>Some English Value</span>\" }, { \"Culture\" : \"fr\" , \"Value\" : \"<span>Some French Value</span>\" } ] } ] Input {{ \"my_html_value\" | localize }} {{ Model . ContentItem | localize : \"my_html_value\" | raw }} Output &lt;span&gt;bold value&lt;/span&gt; <span>Some English Value</span>","title":"if you want to render html, you need to | raw"},{"location":"reference/Liquid/#github-statcanorchardcoregithub","text":"Here are some liquid filters provided by the GitHub module. tokenName refers to the name of the token you added to the github settings.","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/Liquid/#github_pr-filter","text":"Returns the PullRequest object for the specified pull request number. {{ 123 | github_pullrequest : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_pr filter"},{"location":"reference/Liquid/#github_pr_reviewcomments-filter","text":"Returns a list of PullRequestReviewComment object for the specified pull request number. This returns the comments related to PR reviews. Use the github_comments filter to get pr discussions. {{ 123 | github_pullrequest_comments : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_pr_reviewcomments filter"},{"location":"reference/Liquid/#github_issue-filter","text":"Returns the Issue object for the specified issue number. {{ 123 | github_issue : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_issue filter"},{"location":"reference/Liquid/#github_comments-filter","text":"Returns a list of IssueComment for the specified issue / pull request number. {{ 123 | github_comments : \"owner\" , \"repo\" , \"tokenName\" }}","title":"github_comments filter"},{"location":"reference/Liquid/#user-filters","text":"","title":"User filters"},{"location":"reference/Liquid/#users_by_role-filter","text":"Returns a list of Users that have the role(s) passed as a parameter of the filter {% assign users = \"Editor,Administrator\" | split : ',' | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %} -- {% assign users = \"Editor\" | users_by_role %} {% for user in users %} {{ user . Email }} {% endfor %}","title":"users_by_role filter"},{"location":"reference/Scripting/","text":"Scripting \u00b6 The following methods are available in addition to the OrchardCore scripting methods . Note : The feature (module) where the scripts are defined needs to be enabled for the methods to be available in your scripts. For example, to get the httpContext() function, you must enable the OrchardCore.Workflows.Http feature in the admin panel. Scripting module ( StatCan.OrchardCore.Scripting ) \u00b6 Http \u00b6 Function Description httpRedirect(url: String): void Calls the HttpContext.Response.Redirect() method, prefixing the passed url with the tenant pathBase Forms \u00b6 Function Description requestFormAsJsonObject(): JObject Returns a sanitized JObject representation of the HttpContext.Request.Form object. Sanitization is performed by Orchard's sanitizer . addError(name: String, errorMessage: String): void Adds an error to the input with the specified name. Use the serverValidationMessage name to add a global error message to your VueForm. hasErrors(): Boolean Returns true if the error dictionary contains any errors. validateReCaptcha(recaptchaResponse): Boolean Returns true if the recaptchaResponse is valid, false if invalid. Contents \u00b6 These methods are added when the OrchardCore.Contents module is enabled Function Description contentByItemId(contentItemId: String): ContentItem Returns the ContentItem with the specified contentItemId Users \u00b6 These methods are added when the OrchardCore.Users module is enabled Function Description validateEmail(email: String): Boolean Validates an email address updateEmail(email: String): UpdateEmailStatus Validates an email address. Success = 0, Unauthorized = 1, InvalidEmail = 2, AlreadyExists = 3, UpdateError = 4 updateCustomUserSettings(contentType: String, properties: Object): UpdateSettingsStatus Updates the CustomUserSettings with the specified contentType with the passed properties. Success = 0, Unauthorized = 1, TypeError = 2 setUserRole(userName: String, roleName: String): Boolean Sets a role to a user. Security critical function. Localization \u00b6 These methods are added when the OrchardCore.ContentLocalization module is enabled Function Description contentByLocalizationSet(localizationSet: String, culture: String): ContentItem Returns the ContentItem with the attached localizationSet for the specified culture LocalizedText module (`StatCan.OrchardCore.LocalizedText) \u00b6 You can get the values stored in the LocalizedTextPart inside a script. Function Description getLocalizedTextValues(contentItem: ContentItem): JObject Returns a JObject representation of the LocalizedTextPart for the current thread culture VueForms module (`StatCan.OrchardCore.VueForms) \u00b6 Function Description getFormContentItem(): ContentItem Only available in the VueForm server side scripts. Returns the current VueForm ContentItem instance.","title":"Scripting"},{"location":"reference/Scripting/#scripting","text":"The following methods are available in addition to the OrchardCore scripting methods . Note : The feature (module) where the scripts are defined needs to be enabled for the methods to be available in your scripts. For example, to get the httpContext() function, you must enable the OrchardCore.Workflows.Http feature in the admin panel.","title":"Scripting"},{"location":"reference/Scripting/#scripting-module-statcanorchardcorescripting","text":"","title":"Scripting module (StatCan.OrchardCore.Scripting)"},{"location":"reference/Scripting/#http","text":"Function Description httpRedirect(url: String): void Calls the HttpContext.Response.Redirect() method, prefixing the passed url with the tenant pathBase","title":"Http"},{"location":"reference/Scripting/#forms","text":"Function Description requestFormAsJsonObject(): JObject Returns a sanitized JObject representation of the HttpContext.Request.Form object. Sanitization is performed by Orchard's sanitizer . addError(name: String, errorMessage: String): void Adds an error to the input with the specified name. Use the serverValidationMessage name to add a global error message to your VueForm. hasErrors(): Boolean Returns true if the error dictionary contains any errors. validateReCaptcha(recaptchaResponse): Boolean Returns true if the recaptchaResponse is valid, false if invalid.","title":"Forms"},{"location":"reference/Scripting/#contents","text":"These methods are added when the OrchardCore.Contents module is enabled Function Description contentByItemId(contentItemId: String): ContentItem Returns the ContentItem with the specified contentItemId","title":"Contents"},{"location":"reference/Scripting/#users","text":"These methods are added when the OrchardCore.Users module is enabled Function Description validateEmail(email: String): Boolean Validates an email address updateEmail(email: String): UpdateEmailStatus Validates an email address. Success = 0, Unauthorized = 1, InvalidEmail = 2, AlreadyExists = 3, UpdateError = 4 updateCustomUserSettings(contentType: String, properties: Object): UpdateSettingsStatus Updates the CustomUserSettings with the specified contentType with the passed properties. Success = 0, Unauthorized = 1, TypeError = 2 setUserRole(userName: String, roleName: String): Boolean Sets a role to a user. Security critical function.","title":"Users"},{"location":"reference/Scripting/#localization","text":"These methods are added when the OrchardCore.ContentLocalization module is enabled Function Description contentByLocalizationSet(localizationSet: String, culture: String): ContentItem Returns the ContentItem with the attached localizationSet for the specified culture","title":"Localization"},{"location":"reference/Scripting/#localizedtext-module-statcanorchardcorelocalizedtext","text":"You can get the values stored in the LocalizedTextPart inside a script. Function Description getLocalizedTextValues(contentItem: ContentItem): JObject Returns a JObject representation of the LocalizedTextPart for the current thread culture","title":"LocalizedText module (`StatCan.OrchardCore.LocalizedText)"},{"location":"reference/Scripting/#vueforms-module-statcanorchardcorevueforms","text":"Function Description getFormContentItem(): ContentItem Only available in the VueForm server side scripts. Returns the current VueForm ContentItem instance.","title":"VueForms module (`StatCan.OrchardCore.VueForms)"},{"location":"reference/Workflows/","text":"Workflows \u00b6 This document contains documentation for all workflow tasks and activities available in this repository. GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 The following activities are available with the GitHub module Activity Type Description Commit File Task Create or updates a file on a specific branch Create Branch Task Creates a branch from a git reference Create Pull Request Task Creates a pull request VueForms ( StatCan.OrchardCore.VueForms ) \u00b6 Activity Type Description VueForm Submitted Event Triggerred when a VueForm is valid. Runs for all selected VueForms in the Event options.","title":"Workflows"},{"location":"reference/Workflows/#workflows","text":"This document contains documentation for all workflow tasks and activities available in this repository.","title":"Workflows"},{"location":"reference/Workflows/#github-statcanorchardcoregithub","text":"The following activities are available with the GitHub module Activity Type Description Commit File Task Create or updates a file on a specific branch Create Branch Task Creates a branch from a git reference Create Pull Request Task Creates a pull request","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/Workflows/#vueforms-statcanorchardcorevueforms","text":"Activity Type Description VueForm Submitted Event Triggerred when a VueForm is valid. Runs for all selected VueForms in the Event options.","title":"VueForms (StatCan.OrchardCore.VueForms)"},{"location":"reference/modules/ContentFields/","text":"ContentFields ( StatCan.OrchareCore.ContentFields ) \u00b6 TODO","title":"ContentFields"},{"location":"reference/modules/ContentFields/#contentfields-statcanorcharecorecontentfields","text":"TODO","title":"ContentFields (StatCan.OrchareCore.ContentFields)"},{"location":"reference/modules/DisplayHelpers/","text":"DisplayHelpers ( StatCan.OrchardCore.DisplayHelpers ) \u00b6 TODO","title":"DisplayHelpers"},{"location":"reference/modules/DisplayHelpers/#displayhelpers-statcanorchardcoredisplayhelpers","text":"TODO","title":"DisplayHelpers (StatCan.OrchardCore.DisplayHelpers)"},{"location":"reference/modules/GCCollab/","text":"GCCollab ( StatCan.OrchardCore.GCCollab ) \u00b6 TODO This module add GCCollab Authentication to OrchardCore","title":"GCCollab"},{"location":"reference/modules/GCCollab/#gccollab-statcanorchardcoregccollab","text":"TODO This module add GCCollab Authentication to OrchardCore","title":"GCCollab (StatCan.OrchardCore.GCCollab)"},{"location":"reference/modules/GitHub/","text":"GitHub ( StatCan.OrchardCore.GitHub ) \u00b6 This module adds the ability to interact with GitHub using OrchardCore. This is different than the authentication module OrchardCore.GitHub Your GitHub api token(s) must be set throught the Configuration -> Settings -> GitHub Api menu in the admin dashboard. Workflow \u00b6 Please see the workflow documentation for activities. Liquid \u00b6 Please see the liquid documentation for liquid filters.","title":"GitHub"},{"location":"reference/modules/GitHub/#github-statcanorchardcoregithub","text":"This module adds the ability to interact with GitHub using OrchardCore. This is different than the authentication module OrchardCore.GitHub Your GitHub api token(s) must be set throught the Configuration -> Settings -> GitHub Api menu in the admin dashboard.","title":"GitHub (StatCan.OrchardCore.GitHub)"},{"location":"reference/modules/GitHub/#workflow","text":"Please see the workflow documentation for activities.","title":"Workflow"},{"location":"reference/modules/GitHub/#liquid","text":"Please see the liquid documentation for liquid filters.","title":"Liquid"},{"location":"reference/modules/LocalizedText/","text":"LocalizedText ( StatCan.OrchardCore.LocalizedText ) \u00b6 This module adds a LocalizedText Part that stores [{ name, [{ culture, value}]}] objects. LocalizedTextPart \u00b6 Attach this part to your content items to have the ability to add name -> value pairs that vary by culture. Usages \u00b6 This part is meant to be used in cases where a Single ContentItem needs to hold localized values. As a \"best practice\" this should only be used when most of the data is non localizable and some is localizable. Liquid \u00b6 Please see the liquid documentation for liquid filters. Scripting \u00b6 Please see the scripting documentation","title":"LocalizedText"},{"location":"reference/modules/LocalizedText/#localizedtext-statcanorchardcorelocalizedtext","text":"This module adds a LocalizedText Part that stores [{ name, [{ culture, value}]}] objects.","title":"LocalizedText (StatCan.OrchardCore.LocalizedText)"},{"location":"reference/modules/LocalizedText/#localizedtextpart","text":"Attach this part to your content items to have the ability to add name -> value pairs that vary by culture.","title":"LocalizedTextPart"},{"location":"reference/modules/LocalizedText/#usages","text":"This part is meant to be used in cases where a Single ContentItem needs to hold localized values. As a \"best practice\" this should only be used when most of the data is non localizable and some is localizable.","title":"Usages"},{"location":"reference/modules/LocalizedText/#liquid","text":"Please see the liquid documentation for liquid filters.","title":"Liquid"},{"location":"reference/modules/LocalizedText/#scripting","text":"Please see the scripting documentation","title":"Scripting"},{"location":"reference/modules/Matomo/","text":"Matomo ( StatCan.OrchardCore.Matomo ) \u00b6 Todo: Document this module","title":"Matomo"},{"location":"reference/modules/Matomo/#matomo-statcanorchardcorematomo","text":"Todo: Document this module","title":"Matomo (StatCan.OrchardCore.Matomo)"},{"location":"reference/modules/VueForms/","text":"VueForms ( StatCan.OrchardCore.VueForms ) \u00b6 The VueForms module aims to simplify the creation of client side forms in OrchardCore. Content definitions \u00b6 VueForm \u00b6 The VueForm content type is used to create forms that use VueJs and VeeValidate client side librairies. The form submission is handled via an ajax call to a generic controller that returns json to the client for seamless server side validation. VueForm Part \u00b6 Field Definition Enabled If disabled, the DisplayHtml field value will be displayed and the VueFormController will return a 404 for form submissions. RenderAs Render the Form as a Vue Component, a Vue App or Vuetify app DisabledHtml Html displayed when the form is disabled. SuccessMessage The success message returned to the client when the form is valid and no redirect is specified after submission. With Liquid support. VueFormScripts Part \u00b6 Field Definition ClientInit A client side script that is executed prior to instanciating the VueJs app. ComponentOptions The VueJS component options object for your VueForm component. OnValidation Server side validation script that allows us to validate the form. OnSubmitted Server side script that runs if the form is valid ClientInit script \u00b6 The ClientInit script is executed client side prior to instanciating the form component. This script has access to the client's global scope variables. This was added to support hooking into some global options for VeeValidate. For example, setting the VeeValidate.setInteractionMode('passive') option or the Localization option. VeeValidate . setInteractionMode ( 'passive' ); OnValidation script \u00b6 The OnValidation script is used to specify the server side validation script. We are planning to implement components with integrated validation in the future. This module adds some scripting methods to facilitate handling form data and errors. Here is an example OnValidation script that validates that the name is required. Note : the first parameter of addError must be your input name that must also match the VeeValidate ValidationProvider name. var data = requestFormAsJsonObject (); if ( data . name == \"\" ) { addError ( 'name' , 'The name is required' ); } You can also add to a list of \"global\" error messages by passing the 'serverValidationMessage' name to the addError() function. addError ( 'serverValidationMessage' , 'This is a validation message that is not tied to any input!!' ); addError ( 'serverValidationMessage' , 'You can add many, they will come as an array via the \"form.serverValidationMessage\" prop!' ); All errors are also available on the VueJS component options object's via the form.responseData.errors property OnSubmitted script \u00b6 The OnSubmitted script is executed after the OnValidation script, only if the form is valid. This is where you would typically create a contentItem from the form data or redirect the user to another page. Here is an example OnSubmitted script that redirects the user to a success page after having created the PersonInfo content item. Note : the OrchardCore.Workflow.Http module must be enabled to have access to the httpContext() method. var data = requestFormAsJsonObject (); createContentItem ( \"PersonInfo\" , true , { \"PersonInfo\" : { \"Name\" : { \"Text\" : data . name }, \"Email\" : { \"Text\" : data . email }, \"Gender\" : { \"Text\" : data . gender } } }); httpContext (). Response . Redirect ( '/success' ) Component Options object \u00b6 This is where you write the VueJS component options object for the form component. At a minimum, you must define the data object. When the VueForm is submitted, the data object is serialized and sent to the server. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }) } VueComponent Widget \u00b6 The VueComponent widget allows you to write VueJS markup that will be included in your VueForm component Template \u00b6 Important implementation notes: - This field should return a single vue / html node. Example: < v-container > < v-card-text > < v-row justify = \"center\" > < v-col cols = \"8\" > < validation-provider name = \"{{ \" nameLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-text-field v-model = \"name\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" nameLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" emailLabel \" | localize | downcase }}\" rules = \"required|email\" v-slot = \"{ errors }\" > < v-text-field v-model = \"email\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" emailLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" messageLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-textarea v-model = \"message\" :error-messages = \"errors\" counter = \"true\" filled = \"filled\" label = \"{{ \" messageLabel \" | localize }}\" rows = \"5\" > </ v-textarea > </ validation-provider > </ v-col > < v-col cols = \"8\" > < v-alert type = \"success\" v-if = \"form.successMessage\" > {% raw %}{{ form.successMessage }}{% endraw %} </ v-alert > < v-alert type = \"error\" v-if = \"form.errorMessage\" > {% raw %}{{ form.errorMessage }}{% endraw %} </ v-alert > </ v-col > < v-col cols = \"8\" > < v-btn type = \"submit\" depressed block @ click = \"formHandleSubmit\" :disabled = \"form.submitting\" > {{ \"submitLabel\" | localize }} </ v-btn > </ v-col > </ v-row > </ v-card-text > </ v-container > Available Props \u00b6 The VueForm component has some default properties and methods. You can access these properties in your templates or in the component options object. Name Definition obs.* All props available on the v-slot of the ValidationObserver are available. formReset A method that resets the form.* properties to the initial state. Does not reset your component's data. () => void formHandleSubmit A method that calls the validate() method and then, if valid, sends an ajax request to our controller () => void form.submitting Set to true when the form is being submitted. form.submitSuccess Set to true when no redirect is specified and the submission was a success. form.successMessage The success message returned from the server as specified in the VueForm form.submitValidationError Set to true when a server validation error occus. form.serverValidationMessage Array of errors set by the server with the addError('serverValidationMessage', 'Message') scripting method. form.responseData The raw response data recieved from the server. Useful if you want to return additional data to the form via a workflow. form.submitError Set to true when a server error, ajax error or unhandled error occurs. form.serverErrorMessage An error message set with the ajax error status code and text. Only set when a server errors occur. Scripting \u00b6 Please see the scripting documentation. Workflow integration \u00b6 Although this module does not require a workflow to handle the form submissions, we still provide a workflow hook to support performing some additional actions. Please see the workflow documentation. If you do use a workflow, you can use the addError(\"name\", \"message\"); script to add form errors. You can also use the HttpRedirect or HttpResponse workflow tasks to redirect or return a custom set of data to the client. All data returned by the HttpResponse task is available via the form.responseData object. Localization ( StatCan.OrchardCore.VueForms.Localized ) \u00b6 While you can use Orchard's LocalizationPart to localize your forms. We suggest you use the LocalizedText feature to implement i18n in your forms. This part is what we weld to your VueForm content type when you enable this feature. The [locale] shortcode is also useful to use in your views to localize simple text fields. Examples \u00b6 The following example forms are provided with the VueForms module as recipes: Contact Form UserProfile Form UserProfile Form \u00b6 This form allows you to edit a UserProfile Content Type with the CustomUserSettings stereotype. For this form to work, you must enable the Users Change Email feature along with allowing users to update their email in the settings.","title":"VueForms"},{"location":"reference/modules/VueForms/#vueforms-statcanorchardcorevueforms","text":"The VueForms module aims to simplify the creation of client side forms in OrchardCore.","title":"VueForms (StatCan.OrchardCore.VueForms)"},{"location":"reference/modules/VueForms/#content-definitions","text":"","title":"Content definitions"},{"location":"reference/modules/VueForms/#vueform","text":"The VueForm content type is used to create forms that use VueJs and VeeValidate client side librairies. The form submission is handled via an ajax call to a generic controller that returns json to the client for seamless server side validation.","title":"VueForm"},{"location":"reference/modules/VueForms/#vueform-part","text":"Field Definition Enabled If disabled, the DisplayHtml field value will be displayed and the VueFormController will return a 404 for form submissions. RenderAs Render the Form as a Vue Component, a Vue App or Vuetify app DisabledHtml Html displayed when the form is disabled. SuccessMessage The success message returned to the client when the form is valid and no redirect is specified after submission. With Liquid support.","title":"VueForm Part"},{"location":"reference/modules/VueForms/#vueformscripts-part","text":"Field Definition ClientInit A client side script that is executed prior to instanciating the VueJs app. ComponentOptions The VueJS component options object for your VueForm component. OnValidation Server side validation script that allows us to validate the form. OnSubmitted Server side script that runs if the form is valid","title":"VueFormScripts Part"},{"location":"reference/modules/VueForms/#clientinit-script","text":"The ClientInit script is executed client side prior to instanciating the form component. This script has access to the client's global scope variables. This was added to support hooking into some global options for VeeValidate. For example, setting the VeeValidate.setInteractionMode('passive') option or the Localization option. VeeValidate . setInteractionMode ( 'passive' );","title":"ClientInit script"},{"location":"reference/modules/VueForms/#onvalidation-script","text":"The OnValidation script is used to specify the server side validation script. We are planning to implement components with integrated validation in the future. This module adds some scripting methods to facilitate handling form data and errors. Here is an example OnValidation script that validates that the name is required. Note : the first parameter of addError must be your input name that must also match the VeeValidate ValidationProvider name. var data = requestFormAsJsonObject (); if ( data . name == \"\" ) { addError ( 'name' , 'The name is required' ); } You can also add to a list of \"global\" error messages by passing the 'serverValidationMessage' name to the addError() function. addError ( 'serverValidationMessage' , 'This is a validation message that is not tied to any input!!' ); addError ( 'serverValidationMessage' , 'You can add many, they will come as an array via the \"form.serverValidationMessage\" prop!' ); All errors are also available on the VueJS component options object's via the form.responseData.errors property","title":"OnValidation script"},{"location":"reference/modules/VueForms/#onsubmitted-script","text":"The OnSubmitted script is executed after the OnValidation script, only if the form is valid. This is where you would typically create a contentItem from the form data or redirect the user to another page. Here is an example OnSubmitted script that redirects the user to a success page after having created the PersonInfo content item. Note : the OrchardCore.Workflow.Http module must be enabled to have access to the httpContext() method. var data = requestFormAsJsonObject (); createContentItem ( \"PersonInfo\" , true , { \"PersonInfo\" : { \"Name\" : { \"Text\" : data . name }, \"Email\" : { \"Text\" : data . email }, \"Gender\" : { \"Text\" : data . gender } } }); httpContext (). Response . Redirect ( '/success' )","title":"OnSubmitted script"},{"location":"reference/modules/VueForms/#component-options-object","text":"This is where you write the VueJS component options object for the form component. At a minimum, you must define the data object. When the VueForm is submitted, the data object is serialized and sent to the server. { data : () => ({ items : [ \"Female\" , \"Male\" , \"Other\" ], name : \"\" , email : \"\" , gender : undefined }) }","title":"Component Options object"},{"location":"reference/modules/VueForms/#vuecomponent-widget","text":"The VueComponent widget allows you to write VueJS markup that will be included in your VueForm component","title":"VueComponent Widget"},{"location":"reference/modules/VueForms/#template","text":"Important implementation notes: - This field should return a single vue / html node. Example: < v-container > < v-card-text > < v-row justify = \"center\" > < v-col cols = \"8\" > < validation-provider name = \"{{ \" nameLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-text-field v-model = \"name\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" nameLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" emailLabel \" | localize | downcase }}\" rules = \"required|email\" v-slot = \"{ errors }\" > < v-text-field v-model = \"email\" :error-messages = \"errors\" filled = \"filled\" label = \"{{ \" emailLabel \" | localize }}\" ></ v-text-field > </ validation-provider > </ v-col > < v-col cols = \"8\" > < validation-provider name = \"{{ \" messageLabel \" | localize | downcase }}\" rules = \"required\" v-slot = \"{ errors }\" > < v-textarea v-model = \"message\" :error-messages = \"errors\" counter = \"true\" filled = \"filled\" label = \"{{ \" messageLabel \" | localize }}\" rows = \"5\" > </ v-textarea > </ validation-provider > </ v-col > < v-col cols = \"8\" > < v-alert type = \"success\" v-if = \"form.successMessage\" > {% raw %}{{ form.successMessage }}{% endraw %} </ v-alert > < v-alert type = \"error\" v-if = \"form.errorMessage\" > {% raw %}{{ form.errorMessage }}{% endraw %} </ v-alert > </ v-col > < v-col cols = \"8\" > < v-btn type = \"submit\" depressed block @ click = \"formHandleSubmit\" :disabled = \"form.submitting\" > {{ \"submitLabel\" | localize }} </ v-btn > </ v-col > </ v-row > </ v-card-text > </ v-container >","title":"Template"},{"location":"reference/modules/VueForms/#available-props","text":"The VueForm component has some default properties and methods. You can access these properties in your templates or in the component options object. Name Definition obs.* All props available on the v-slot of the ValidationObserver are available. formReset A method that resets the form.* properties to the initial state. Does not reset your component's data. () => void formHandleSubmit A method that calls the validate() method and then, if valid, sends an ajax request to our controller () => void form.submitting Set to true when the form is being submitted. form.submitSuccess Set to true when no redirect is specified and the submission was a success. form.successMessage The success message returned from the server as specified in the VueForm form.submitValidationError Set to true when a server validation error occus. form.serverValidationMessage Array of errors set by the server with the addError('serverValidationMessage', 'Message') scripting method. form.responseData The raw response data recieved from the server. Useful if you want to return additional data to the form via a workflow. form.submitError Set to true when a server error, ajax error or unhandled error occurs. form.serverErrorMessage An error message set with the ajax error status code and text. Only set when a server errors occur.","title":"Available Props"},{"location":"reference/modules/VueForms/#scripting","text":"Please see the scripting documentation.","title":"Scripting"},{"location":"reference/modules/VueForms/#workflow-integration","text":"Although this module does not require a workflow to handle the form submissions, we still provide a workflow hook to support performing some additional actions. Please see the workflow documentation. If you do use a workflow, you can use the addError(\"name\", \"message\"); script to add form errors. You can also use the HttpRedirect or HttpResponse workflow tasks to redirect or return a custom set of data to the client. All data returned by the HttpResponse task is available via the form.responseData object.","title":"Workflow integration"},{"location":"reference/modules/VueForms/#localization-statcanorchardcorevueformslocalized","text":"While you can use Orchard's LocalizationPart to localize your forms. We suggest you use the LocalizedText feature to implement i18n in your forms. This part is what we weld to your VueForm content type when you enable this feature. The [locale] shortcode is also useful to use in your views to localize simple text fields.","title":"Localization (StatCan.OrchardCore.VueForms.Localized)"},{"location":"reference/modules/VueForms/#examples","text":"The following example forms are provided with the VueForms module as recipes: Contact Form UserProfile Form","title":"Examples"},{"location":"reference/modules/VueForms/#userprofile-form","text":"This form allows you to edit a UserProfile Content Type with the CustomUserSettings stereotype. For this form to work, you must enable the Users Change Email feature along with allowing users to update their email in the settings.","title":"UserProfile Form"},{"location":"reference/modules/WebpageCore/","text":"WebpageCore ( StatCan.OrchardCore.WebpageCore ) \u00b6 TODO","title":"WebpageCore"},{"location":"reference/modules/WebpageCore/#webpagecore-statcanorchardcorewebpagecore","text":"TODO","title":"WebpageCore (StatCan.OrchardCore.WebpageCore)"},{"location":"reference/themes/DigitalAdmin/","text":"Digital Admin Theme \u00b6 The theme used for the admin dashboard. Adds a language toggle at the top.","title":"DigitalAdmin"},{"location":"reference/themes/DigitalAdmin/#digital-admin-theme","text":"The theme used for the admin dashboard. Adds a language toggle at the top.","title":"Digital Admin Theme"},{"location":"reference/themes/PortalTheme/","text":"Portal Theme \u00b6","title":"PortalTheme"},{"location":"reference/themes/PortalTheme/#portal-theme","text":"","title":"Portal Theme"}]}